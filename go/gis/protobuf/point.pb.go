// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gis/protobuf/point.proto

package gis_protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// type: Point
// coordinates: [x, y]
type Point2D struct {
	X float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
}

func (m *Point2D) Reset()                    { *m = Point2D{} }
func (m *Point2D) String() string            { return proto.CompactTextString(m) }
func (*Point2D) ProtoMessage()               {}
func (*Point2D) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Point2D) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Point2D) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

// type: Point
// coordinates: [x, y, z]
type Point3D struct {
	X float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
}

func (m *Point3D) Reset()                    { *m = Point3D{} }
func (m *Point3D) String() string            { return proto.CompactTextString(m) }
func (*Point3D) ProtoMessage()               {}
func (*Point3D) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Point3D) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Point3D) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Point3D) GetZ() float32 {
	if m != nil {
		return m.Z
	}
	return 0
}

// type: MultiPoint
// coordinates: [[x, y], [x, y]]
type MultiPoint2D struct {
	Point []*Point2D `protobuf:"bytes,1,rep,name=point" json:"point,omitempty"`
}

func (m *MultiPoint2D) Reset()                    { *m = MultiPoint2D{} }
func (m *MultiPoint2D) String() string            { return proto.CompactTextString(m) }
func (*MultiPoint2D) ProtoMessage()               {}
func (*MultiPoint2D) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *MultiPoint2D) GetPoint() []*Point2D {
	if m != nil {
		return m.Point
	}
	return nil
}

// type: MultiPoint
// coordinates: [[x, y, z], [x, y, z]]
type MultiPoint3D struct {
	Point []*Point3D `protobuf:"bytes,1,rep,name=point" json:"point,omitempty"`
}

func (m *MultiPoint3D) Reset()                    { *m = MultiPoint3D{} }
func (m *MultiPoint3D) String() string            { return proto.CompactTextString(m) }
func (*MultiPoint3D) ProtoMessage()               {}
func (*MultiPoint3D) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *MultiPoint3D) GetPoint() []*Point3D {
	if m != nil {
		return m.Point
	}
	return nil
}

func init() {
	proto.RegisterType((*Point2D)(nil), "gis.protobuf.Point2D")
	proto.RegisterType((*Point3D)(nil), "gis.protobuf.Point3D")
	proto.RegisterType((*MultiPoint2D)(nil), "gis.protobuf.MultiPoint2D")
	proto.RegisterType((*MultiPoint3D)(nil), "gis.protobuf.MultiPoint3D")
}

func init() { proto.RegisterFile("gis/protobuf/point.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 155 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x48, 0xcf, 0x2c, 0xd6,
	0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x2f, 0xc8, 0xcf, 0xcc, 0x2b, 0xd1, 0x03,
	0x73, 0x85, 0x78, 0xd2, 0x33, 0x8b, 0xf5, 0x60, 0x32, 0x4a, 0xaa, 0x5c, 0xec, 0x01, 0x20, 0x49,
	0x23, 0x17, 0x21, 0x1e, 0x2e, 0xc6, 0x0a, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xa6, 0x20, 0xc6, 0x0a,
	0x10, 0xaf, 0x52, 0x82, 0x09, 0xc2, 0xab, 0x54, 0x32, 0x86, 0x2a, 0x33, 0xc6, 0xab, 0x0c, 0xc4,
	0xab, 0x92, 0x60, 0x86, 0xf0, 0xaa, 0x94, 0xac, 0xb9, 0x78, 0x7c, 0x4b, 0x73, 0x4a, 0x32, 0x61,
	0x16, 0x68, 0x73, 0xb1, 0x82, 0x1d, 0x22, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x6d, 0x24, 0xaa, 0x87,
	0xec, 0x12, 0x3d, 0xa8, 0xaa, 0x20, 0x88, 0x1a, 0x54, 0xcd, 0xc6, 0x44, 0x69, 0x36, 0x86, 0x69,
	0x76, 0xe2, 0x8b, 0x02, 0xf9, 0x32, 0x1e, 0x26, 0x9d, 0xc4, 0x06, 0x66, 0x19, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xa2, 0x76, 0x66, 0xaf, 0x16, 0x01, 0x00, 0x00,
}
