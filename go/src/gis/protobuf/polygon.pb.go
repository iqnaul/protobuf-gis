// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gis/protobuf/polygon.proto

package gis_protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// type: Polygon
// coordinates: [[[x, y], [x, y]]]
type Polygon2D struct {
	Point []*Point2D `protobuf:"bytes,1,rep,name=point" json:"point,omitempty"`
}

func (m *Polygon2D) Reset()                    { *m = Polygon2D{} }
func (m *Polygon2D) String() string            { return proto.CompactTextString(m) }
func (*Polygon2D) ProtoMessage()               {}
func (*Polygon2D) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Polygon2D) GetPoint() []*Point2D {
	if m != nil {
		return m.Point
	}
	return nil
}

// type: Polygon
// coordinates: [[[x, y, z], [x, y, z]]]
type Polygon3D struct {
	Point []*Point3D `protobuf:"bytes,1,rep,name=point" json:"point,omitempty"`
}

func (m *Polygon3D) Reset()                    { *m = Polygon3D{} }
func (m *Polygon3D) String() string            { return proto.CompactTextString(m) }
func (*Polygon3D) ProtoMessage()               {}
func (*Polygon3D) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *Polygon3D) GetPoint() []*Point3D {
	if m != nil {
		return m.Point
	}
	return nil
}

// type: MultiPolygin
// coordinates: [[[[x, y], [x, y]]], [[[x, y], [x, y]]]]
type MultiPolygon2D struct {
	Polygon []*Polygon2D `protobuf:"bytes,1,rep,name=polygon" json:"polygon,omitempty"`
}

func (m *MultiPolygon2D) Reset()                    { *m = MultiPolygon2D{} }
func (m *MultiPolygon2D) String() string            { return proto.CompactTextString(m) }
func (*MultiPolygon2D) ProtoMessage()               {}
func (*MultiPolygon2D) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *MultiPolygon2D) GetPolygon() []*Polygon2D {
	if m != nil {
		return m.Polygon
	}
	return nil
}

// type: MultiPolygin
// coordinates: [[[[x, y, z], [x, y, z]]], [[[x, y, z], [x, y, z]]]]
type MultiPolygon3D struct {
	Polygon []*Polygon3D `protobuf:"bytes,1,rep,name=polygon" json:"polygon,omitempty"`
}

func (m *MultiPolygon3D) Reset()                    { *m = MultiPolygon3D{} }
func (m *MultiPolygon3D) String() string            { return proto.CompactTextString(m) }
func (*MultiPolygon3D) ProtoMessage()               {}
func (*MultiPolygon3D) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *MultiPolygon3D) GetPolygon() []*Polygon3D {
	if m != nil {
		return m.Polygon
	}
	return nil
}

func init() {
	proto.RegisterType((*Polygon2D)(nil), "gis.protobuf.Polygon2D")
	proto.RegisterType((*Polygon3D)(nil), "gis.protobuf.Polygon3D")
	proto.RegisterType((*MultiPolygon2D)(nil), "gis.protobuf.MultiPolygon2D")
	proto.RegisterType((*MultiPolygon3D)(nil), "gis.protobuf.MultiPolygon3D")
}

func init() { proto.RegisterFile("gis/protobuf/polygon.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4a, 0xcf, 0x2c, 0xd6,
	0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x2f, 0xc8, 0xcf, 0xa9, 0x4c, 0xcf, 0xcf,
	0xd3, 0x03, 0x0b, 0x08, 0xf1, 0xa4, 0x67, 0x16, 0xeb, 0xc1, 0xe4, 0xa4, 0x24, 0xd0, 0x54, 0x66,
	0xe6, 0x95, 0x40, 0x24, 0x95, 0x2c, 0xb8, 0x38, 0x03, 0x20, 0x1a, 0x8d, 0x5c, 0x84, 0xb4, 0xb9,
	0x58, 0xc1, 0x72, 0x12, 0x8c, 0x0a, 0xcc, 0x1a, 0xdc, 0x46, 0xa2, 0x7a, 0xc8, 0x86, 0xe8, 0x05,
	0x80, 0xa4, 0x8c, 0x5c, 0x82, 0x20, 0x6a, 0x90, 0x74, 0x1a, 0x13, 0xa5, 0xd3, 0x18, 0xae, 0xd3,
	0x99, 0x8b, 0xcf, 0xb7, 0x34, 0xa7, 0x24, 0x13, 0x61, 0xb1, 0x21, 0x17, 0x3b, 0xd4, 0xf9, 0x50,
	0x03, 0xc4, 0xd1, 0x0d, 0x80, 0xaa, 0x0c, 0x82, 0xa9, 0x43, 0x37, 0xc4, 0x98, 0x68, 0x43, 0x8c,
	0x11, 0x86, 0x24, 0xb1, 0x81, 0x25, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x6b, 0xd6,
	0x4d, 0x4a, 0x01, 0x00, 0x00,
}
